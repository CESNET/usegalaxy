---
# TODO: `systemctl unmask tmp.mount` to make /tmp tmpfs (`cvmfs_server import`
# fails if /tmp is xfs, although for some reason was fine on the PSU stratum 0
# w/ xfs /tmp).

- name: Determine whether -p flag is needed for cvmfs_server mkfs or import
  ansible.builtin.set_fact:
    cvmfs_config_apache_flag: "{{ '-p' if not cvmfs_config_apache else '' }}"

- name: Include initial OS-specific tasks
  ansible.builtin.include_tasks: init_{{ ansible_os_family | lower }}.yml
  vars:
    _cvmfs_role: stratum0
    _cvmfs_upgrade: "{{ cvmfs_upgrade_server }}"

- name: Include key setup tasks
  ansible.builtin.include_tasks: keys.yml

- name: Install CernVM-FS private keys
  ansible.builtin.copy:
    content: "{{ item.key }}"
    dest: "{{ item.path }}"
    owner: "{{ item.owner | default('root') }}"
    group: root
    mode: "0400"
  with_items: "{{ cvmfs_private_keys }}"
  loop_control:
    label: "{{ item.path }}"

- name: Include stratumN tasks
  ansible.builtin.include_tasks: stratumN.yml

- name: Include Apache tasks
  ansible.builtin.include_tasks: apache.yml

- name: Include firewall tasks
  ansible.builtin.include_tasks: firewall.yml
  vars:
    _cvmfs_http_ports: "{{ cvmfs_stratum0_http_ports }}"
  when: cvmfs_manage_firewall

- name: Create repositories
  ansible.builtin.command: |
    /usr/bin/cvmfs_server mkfs {{ cvmfs_config_apache_flag }} -o {{ item.owner | default('root') }} -f {{ cvmfs_union_fs }} {{ item.repository }}
  args:
    creates: /srv/cvmfs/{{ item.repository }}
  with_items: "{{ cvmfs_repositories }}"
  notify:
    - Restart apache

- name: Ensure repositories are imported
  ansible.builtin.command: |
    /usr/bin/cvmfs_server import -r {{ cvmfs_config_apache_flag }} -o {{ item.owner | default('root') }} -f {{ cvmfs_union_fs }} {{ item.repository }}
  args:
    creates: /etc/cvmfs/repositories.d/{{ item.repository }}
  with_items: "{{ cvmfs_repositories }}"
  notify:
    - Restart apache

- name: Include repository server options tasks
  ansible.builtin.include_tasks: options.yml
  vars:
    _cvmfs_repo_option_key: server

- name: Include repository client options tasks
  ansible.builtin.include_tasks: options.yml
  vars:
    _cvmfs_repo_option_key: client

- name: Increase default max file descriptor limit
  ansible.builtin.lineinfile:
    dest: /etc/security/limits.conf
    regexp: ^\*\s+{{ item }}\s+nofile\s+\d+$
    line: "*               {{ item }}    nofile          {{ cvmfs_numfiles }}"
  with_items:
    - soft
    - hard
  when: cvmfs_numfiles is defined

- name: Schedule key resignings
  ansible.builtin.cron:
    name: Re-sign CVMFS keys
    cron_file: ansible_cvmfs_key_resign
    user: root
    hour: 11
    minute: 0
    weekday: 2
    job: /usr/bin/cvmfs_server resign {{ cvmfs_repositories | join(' ; /usr/bin/cvmfs_server resign ', attribute='repository') }}

- name: Include garbage collection tasks
  ansible.builtin.include_tasks: gc.yml
  when: cvmfs_gc_enabled

- name: Install cvmfs_prune_snapshots
  copy:
    src: cvmfs_prune_snapshots.sh
    dest: /usr/local/bin/cvmfs_prune_snapshots
    mode: 0755

- name: Schedule snapshot pruning
  ansible.builtin.cron:
    name: cvmfs_prune_snapshots_{{ item.repository }}
    cron_file: ansible_cvmfs_stratum0_prune_snapshots
    user: "{{ item.owner | default('root') }}"
    job: >-
      output=$(/usr/local/bin/cvmfs_prune_snapshots
      -c {{ item.prune_snapshots_count | default(cvmfs_stratum0_prune_snapshots_count) }}
      '{{ item.repository }}' 2>&1) || echo "$output"
    hour: "{{ item.prune_snapshots_time.hour | default(omit) }}"
    minute: "{{ item.prune_snapshots_time.minute | default(omit) }}"
    day: "{{ item.prune_snapshots_time.day | default(omit) }}"
    month: "{{ item.prune_snapshots_time.month | default(omit) }}"
    weekday: "{{ item.prune_snapshots_time.weekday | default(omit) }}"
    special_time: "{{ item.prune_snapshots_time.special_time | default(omit) }}"
  loop: "{{ cvmfs_repositories }}"
  when: item.prune_snapshots_time is defined
