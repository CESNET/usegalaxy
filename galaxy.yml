---
- hosts: dbservers
  become: true
  become_user: root
  pre_tasks:
    - name: Install Dependencies
      package:
        name: ['acl', 'logrotate']
  roles:
    - galaxyproject.postgresql
    - role: galaxyproject.postgresql_objects
      become: true
      become_user: postgres

- hosts: galaxyservers
  become: true
  become_user: root
  vars_files:
    - group_vars/secret.yml
  pre_tasks:
    - name: Install Dependencies
      ansible.builtin.package:
        name: ['acl', 'bzip2', 'git', 'make', 'tar', 'python3-bioblend', 'python3-venv', 'python3-setuptools', 'python3-pip', 'python3-psycopg2', 'rsync', 'python3-docker', 'nginx-full', 'logrotate', 'proftpd-mod-ldap', 'ceph-common']
    - name: Install additional pip packages
      ansible.builtin.pip:
        name: passlib
    - htpasswd:
        path: /etc/nginx/passwd
        name: admin        # Pick a username
        password: "{{ vault_reports_admin_password }}" # and a password
        owner: www-data    # nginx on centos
        group: root
        mode: 0640
    - name: Install RHEL/CentOS/Rocky specific dependencies
      package:
        name: ['tmpwatch']
      when: ansible_os_family == 'RedHat'
    - name: Install Debian/Ubuntu specific dependencies
      package:
        name: ['tmpreaper']
      when: ansible_os_family == 'Debian'
    - name: Comment out SHOWWARNING line in tmpreaper config
      ansible.builtin.lineinfile:
        path: /etc/tmpreaper.conf
        regexp: "SHOWWARNING="
        state: absent
      when: ansible_os_family == 'Debian'

      ## Part responsible for setting up NBD mount (specific for galaxy-re)
    - name: Check if /dev/nbd0 exists
      stat:
        path: "/dev/nbd0"
      register: dev_nbd0_exists
    - name: Setup NBD client
      ansible.builtin.lineinfile:
        path: /etc/nbdtab
        #regexp: "^nbd0"
        line: "nbd0 147.251.11.11 0f2aaea1-55a4-4c15-840d-8f60cefc3f1a conns=20,port=55810"
        create: yes
        insertafter: EOF
      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname and not dev_nbd0_exists.stat.exists"
    - name: Install NBD client
      package:
        name: ['nbd-client']
      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname and not dev_nbd0_exists.stat.exists"
    - name: Add kernel module for NBD
      community.general.modprobe:
        name: nbd
        state: present
      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname and not dev_nbd0_exists.stat.exists"
# nemusi byt dostatocne, existuje totiz aj maskovana sluzba nbd-client.service (pozret: https://github.com/NetworkBlockDevice/nbd/issues/91)
    - name: Restart NBD client
      systemd:
        name: nbd@nbd0.service
        state: started
      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname and not dev_nbd0_exists.stat.exists"
    - name: Mount up NBD
      ansible.posix.mount:
        src: /dev/nbd0
        path: /mnt
        fstype: xfs
        opts: rw,_netdev
        passno: "2"
        state: mounted
      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname"

  roles:
    - galaxyproject.tusd
    - galaxyproject.galaxy
    - usegalaxy_eu.tpv_auto_lint
#    - role: galaxyproject.miniconda
#      become: true
#      become_user: "{{ galaxy_user_name }}"
    - geerlingguy.redis
    - galaxyproject.nginx
    - usegalaxy_eu.flower
    - galaxyproject.proftpd
    - geerlingguy.docker
    - usegalaxy_eu.rabbitmqserver
#    - galaxyproject.tiaas2
    - galaxyproject.gxadmin
    - galaxyproject.cvmfs
#    - dj-wasabi.telegraf
  post_tasks:
    - name: Adds nginx's www-data user into galaxy user group
      ansible.builtin.user:
        name: www-data
        groups: "{{ galaxy_user_group_name }}"
        append: yes
    - name: Restart Nginx after changing its user
      ansible.builtin.systemd:
        state: restarted
        name: nginx
    - name: Creates entry in crontab "chmod on _files for ngnix access"
      ansible.builtin.cron:
        name: "chmod on _files for ngnix access"
        minute: "2"
        hour: "*" 
        #DEMON: zvazit ci nepouzit find /rbd/data/datasets/*/*/*/dataset_*_files -type f ! -perm /g+rw -exec chmod g+rw '{}' ';'
        job: "/usr/bin/find {{ galaxy_config.galaxy.file_path }}/*/*/*/dataset_*_files -maxdepth 0 -type d -mmin -240 -exec chmod -R g+rw '{}' ';'"
      become: yes
      become_user: "{{ galaxy_user_name }}"
    - name: Creates entry in crontab "tmpreaper call in tus upload dir"
      ansible.builtin.cron:
        name: "tmpreaper in tus upload dir"
        minute: "5"
        hour: "*" 
        job: "/usr/sbin/tmpreaper --verbose=0 --showdeleted --all --mtime --mtime-dir --runtime=600 24h {{ galaxy_tus_upload_store }} >> {{ galaxy_data_dir }}/cleaning_tus_upload_dir.log"
      become: yes
      become_user: "{{ galaxy_user_name }}"
    - name: Creates entry in crontab "tmpreaper call in galaxy tmp dir"
      ansible.builtin.cron:
        name: "tmpreaper in galaxy temp dir"
        minute: "7"
        hour: "*" 
        job: "/usr/sbin/tmpreaper --verbose=0 --showdeleted --all --mtime --mtime-dir --runtime=600 24h {{ galaxy_temp_dir }}/tmp >> {{ galaxy_data_dir }}/cleaning_galaxy_temp_dir.log"
      become: yes
      become_user: "{{ galaxy_user_name }}"
#    - name: Creates entry in crontab "tmpreaper call in galaxy jobs dir"
#      ansible.builtin.cron:
#        name: "tmpreaper in galaxy jobs dir"
#        minute: "9"
#        hour: "*" 
#        job: "/usr/sbin/tmpreaper --verbose=0 --showdeleted --all --mtime --mtime-dir --runtime=600 40d {{ galaxy_temp_dir }}/jobs >> {{ galaxy_data_dir }}/cleaning_galaxy_jobs_dir.log"
#      become: yes
#      become_user: "{{ galaxy_user_name }}"
    - name: Setup gxadmin cleanup task
      ansible.builtin.cron:
        name: "Cleanup Old User Data"
        user: "{{ galaxy_user_name }}" # Run as the Galaxy user
        minute: "0"
        hour: "0"
        job: "GALAXY_LOG_DIR=/tmp/gxadmin/ GALAXY_ROOT={{ galaxy_root }}/server /usr/local/bin/gxadmin galaxy cleanup 60 >> {{ galaxy_data_dir }}/cleaning_gxadmin_cleanup.log"
#    - name: RE Galaxy instance patch in lib/galaxy/webapps/galaxy/api/job_files.py
#      replace:
#        path: "{{ galaxy_root }}/server/lib/galaxy/webapps/galaxy/api/job_files.py"
#        regexp: '^(\s*?)shutil\.move\(input_file\.name,\s*path\)\s*$'
#        replace: '\1os.chmod(shutil.move(input_file.name, path), 0o664)'
##        validate: 'python -m py_compile %s'  # Error: python couldn't be found
#      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname"

    - name: Add lines to logrotate config of ProFTPd
      lineinfile:
        path: /etc/logrotate.d/proftpd-core
        line: '{{ item }}'
        insertbefore: BOF
      with_items:
        - /var/log/proftpd/tls.log
        - /var/log/proftpd/sql.log

    - name: Create pg_dump backup folder if needed
      file:
        path:  "{{ postgresql_backup_dir }}/pg_dump"
        state: directory
        owner: postgres
        group: "{{ galaxy_user_group_name }}"
        mode:  0750
    - name: Create initial empty pg_dump file if needed # otherwise the following logrotate conf will not work
      file:
        path:  "{{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql.gz"
        state: touch
        owner: postgres
        group: "{{ galaxy_user_group_name }}"
        mode:  0640
    - name: Set-up Galaxy DB backup using pg_dump and logrotate
      ansible.builtin.blockinfile:
        path: "/etc/logrotate.d/{{ postgresql_pg_dump_prefix }}"
        create: true
        block: |
          {{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql.gz {
            daily
            missingok
            rotate 14
            nocompress
            nocreate
            postrotate
              echo "### Start backup at `date` ###" >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log
              sudo -u postgres pg_dump {{ galaxy_db_name }} --file={{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql --verbose >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log 2>&1
              sudo chmod 640 {{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log 2>&1
              sudo -u postgres gzip {{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log 2>&1
              echo "### Finished backup at `date` ###" >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log
            endscript
          }
    ## Add rule to change owner on sanitize_allowlist in /srv/galaxy/var/config
#    - name: Set-up correct owner on sanitize_allowlist to Galaxy user

    ## Install required Galaxy tools
    - name: Install required tools - create Ephemeris venv
      ansible.builtin.shell:
        cmd: python3 -m venv ~/ephemeris_venv
      tags: tools
    - name: Install required tools - install Ephemeris
      ansible.builtin.shell:
        cmd: source ~/ephemeris_venv/bin/activate && pip install ephemeris
      tags: tools
    - name: Install required tools - install Galaxy tools
      ansible.builtin.shell:
        cmd: ~/ephemeris_venv/bin/shed-tools install -g https://{{ inventory_hostname }}{{ galaxy_prefix }} -a {{ admin_apikey }} -t regalaxy_tool_list.yaml
      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname"
      tags: tools


    - name: Print notification about changing ProFTPd folder
      ansible.builtin.fail:
        msg: DONT FORGET TO REWRITE /etc/proftpd with /etc/proftpd.ldap_works_backup/proftpd !!!!
