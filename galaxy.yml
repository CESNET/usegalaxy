---
- hosts: dbservers
  become: true
  become_user: root
  pre_tasks:
    - name: Install Dependencies
      package:
        name: ['acl', 'logrotate']
  roles:
    - galaxyproject.postgresql
    - role: galaxyproject.postgresql_objects
      become: true
      become_user: postgres
  post_tasks:
    - name: Create pg_dump backup folder if needed
      file:
        path:  "{{ postgresql_backup_dir }}/pg_dump"
        state: directory
        owner: postgres
        group: "{{ galaxy_user_name }}"
        mode:  0750
      tags: test
    - name: Create initial empty pg_dump file if needed # otherwise the following logrotate conf will not work
      file:
        path:  "{{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql.gz"
        state: touch
        owner: postgres
        group: "{{ galaxy_user_name }}"
        mode:  0640
      tags: test
    - name: Set-up Galaxy DB backup using pg_dump and logrotate
      ansible.builtin.blockinfile:
        path: "/etc/logrotate.d/{{ postgresql_pg_dump_prefix }}"
        create: true
        block: |
          {{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql.gz {
            daily
            missingok
            rotate 14
            nocompress
            nocreate
            postrotate
              echo "### Start backup at `date` ###" >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log
              sudo -u postgres pg_dump {{ galaxy_db_name }} --file={{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql --verbose >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log 2>&1
              sudo chmod 640 {{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log 2>&1
              sudo -u postgres gzip {{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log 2>&1
              echo "### Finished backup at `date` ###" >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log
            endscript
          }
      tags: test

- hosts: galaxyservers
  become: true
  become_user: root
  vars_files:
    - group_vars/secret.yml
  pre_tasks:
    - pip:
        name: passlib
    - htpasswd:
        path: /etc/nginx/passwd
        name: admin        # Pick a username
        password: "{{ vault_reports_admin_password }}" # and a password
        owner: www-data    # nginx on centos
        group: root
        mode: 0640
    - name: Install Dependencies
      package:
        name: ['acl', 'bzip2', 'git', 'make', 'tar', 'python3-bioblend', 'python3-venv', 'python3-setuptools', 'python3-pip', 'python3-psycopg2', 'rsync', 'nginx-full']
    - name: Install RHEL/CentOS/Rocky specific dependencies
      package:
        name: ['tmpwatch']
      when: ansible_os_family == 'RedHat'
    - name: Install Debian/Ubuntu specific dependencies
      package:
        name: ['tmpreaper']
      when: ansible_os_family == 'Debian'
    - name: Ensure the python command exists
      ansible.builtin.shell: which python
      register: python_path
    - name: Register python3 path
      ansible.builtin.shell: which python3
      register: python3_path
    - name: Link python to python3 if missing
      ansible.builtin.file:
        src: python3_path.stdout
        dest: python3_path.stdout[:-1]
        state: link
      when: python_path.stdout == ""
  post_tasks:
    - name: Setup gxadmin cleanup task
      ansible.builtin.cron:
        name: "Cleanup Old User Data"
        user: "{{ galaxy_user_name }}" # Run as the Galaxy user
        minute: "0"
        hour: "0"
        job: "GALAXY_LOG_DIR=/tmp/gxadmin/ GALAXY_ROOT={{ galaxy_root }}/server /usr/local/bin/gxadmin galaxy cleanup 60"  
    - name: RE Galaxy instance patch in lib/galaxy/webapps/galaxy/api/job_files.py
      replace:
        path: "{{ galaxy_root }}/server/lib/galaxy/webapps/galaxy/api/job_files.py"
#        after: '^\s*?try:'
        regexp: '^(\s*?)shutil\.move\(input_file\.name,\s*path\)\s*$'
        replace: '\1os.chmod(shutil.move(input_file.name, path), 0o664)'
        validate: 'python -m py_compile %s'
      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname"
  roles:
    - galaxyproject.tusd
    - galaxyproject.galaxy
    - usegalaxy_eu.tpv_auto_lint
    - role: galaxyproject.miniconda
      become: true
      become_user: "{{ galaxy_user_name }}"
    - geerlingguy.redis
    - galaxyproject.nginx
    - usegalaxy_eu.flower
    - galaxyproject.proftpd
    - geerlingguy.docker
    - usegalaxy_eu.rabbitmqserver
    - galaxyproject.gxadmin
