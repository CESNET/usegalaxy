---
- hosts: dbservers
  become: true
  become_user: root
  pre_tasks:
    - name: Install Dependencies
      package:
        name: ['acl', 'logrotate']
  roles:
    - galaxyproject.postgresql
    - role: galaxyproject.postgresql_objects
      become: true
      become_user: postgres

- hosts: galaxyservers
  become: true
  become_user: root
  vars_files:
    - group_vars/secret.yml
  pre_tasks:
    - name: Install Dependencies
      ansible.builtin.package:
        name: ['acl', 'bzip2', 'git', 'make', 'tar', 'python3-bioblend', 'python3-venv', 'python3-setuptools', 'python3-pip', 'python3-psycopg2', 'rsync', 'python3-docker', 'nginx-full', 'squashfs-tools']
    - name: Install additional pip packages
      ansible.builtin.pip:
        name: passlib
    - htpasswd:
        path: /etc/nginx/passwd
        name: admin        # Pick a username
        password: "{{ vault_reports_admin_password }}" # and a password
        owner: www-data    # nginx on centos
        group: root
        mode: 0640
    - name: Install RHEL/CentOS/Rocky specific dependencies
      package:
        name: ['tmpwatch']
      when: ansible_os_family == 'RedHat'
    - name: Install Debian/Ubuntu specific dependencies
      package:
        name: ['tmpreaper']
      when: ansible_os_family == 'Debian'
    - name: Comment out SHOWWARNING line in tmpreaper config
      ansible.builtin.lineinfile:
        path: /etc/tmpreaper.conf
        regexp: "SHOWWARNING="
        state: absent
      when: ansible_os_family == 'Debian'

    - name: Ensure the python command exists
      ansible.builtin.shell: 
        cmd: which python
      register: python_path
      ignore_errors: true
      tags: py
    - name: Register python3 path
      ansible.builtin.command: which python3
      register: python3_path
      when: python_path.stdout == ""
      tags: py
    - name: Link python to python3 if missing
      ansible.builtin.file:
        src: "{{ python3_path.stdout }}"
        dest: "{{ python3_path.stdout[:-1] }}"
        state: link
        force: yes
      when: python_path.stdout == ""
      tags: py

    - git:
        repo: 'https://github.com/usegalaxy-eu/libraries-training-repo'
        dest: /libraries/
      when: "'usegalaxy' in inventory_hostname"
    - name: Create data storage for UMSA
      file:
        owner: "{{ galaxy_user_name }}"
        group: "{{ galaxy_user_group }}"
        path:  "{{ galaxy_data_prefix }}"
        state: directory
        mode:  "0755"
      when: "'umsa' in inventory_hostname"
    - name: Create the RBD storage directory
      file:
        owner: "{{ galaxy_user_name }}"
        group: "{{ galaxy_user_group }}"
        path: /rbd/data
        state: directory
        mode: '0755'
      when: "'usegalaxy' in inventory_hostname"
    - name: Create the nginx upload job files store
      file:
        owner: www-data
        group: "{{ galaxy_user_group }}"
        path: /rbd/data/_upload_job_files
        state: directory
        mode: '0775'
      when: "'usegalaxy' in inventory_hostname"
    - name: Create the client body temp path   
      file:
        owner: www-data
        group: "{{ galaxy_user_group }}"
        path: /rbd/data/nginx_upload_store
        state: directory
        mode: '0775'
      when: "'usegalaxy' in inventory_hostname"

      ## Part responsible for setting up NBD mount (specific for galaxy-re)
    - name: Check if /dev/nbd0 exists
      stat:
        path: "/dev/nbd0"
      register: dev_nbd0_exists
    - name: Setup NBD client
      ansible.builtin.lineinfile:
        path: /etc/nbdtab
        #regexp: "^nbd0"
        line: "nbd0 147.251.11.11 0f2aaea1-55a4-4c15-840d-8f60cefc3f1a conns=20,port=55810"
        create: yes
        insertafter: EOF
      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname and not dev_nbd0_exists.stat.exists"
    - name: Install NBD client
      package:
        name: ['nbd-client']
      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname and not dev_nbd0_exists.stat.exists"
    - name: Add kernel module for NBD
      community.general.modprobe:
        name: nbd
        state: present
      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname and not dev_nbd0_exists.stat.exists"
    - name: Restart NBD client
      systemd:
        name: nbd@nbd0.service
        state: started
      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname and not dev_nbd0_exists.stat.exists"
    - name: Mount up NBD
      ansible.posix.mount:
        src: /dev/nbd0
        path: /mnt
        fstype: xfs
        opts: rw,_netdev
        state: mounted
      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname"

# recover from WAL based on https://training.galaxyproject.org/training-material/topics/admin/tutorials/backup-cleanup/tutorial.html#restoration
    ## Part responsible for recovering Galaxy DB from backup if exists (it should be in post_tasks of dbservers but NDB access needs to be set up first)
    - name: Register psql data directory
      ansible.builtin.shell:
        cmd: psql -Atc 'show data_directory;'
      register: psql_data_dir
      become: true
      become_user: postgres
      tags: gal_db
    - name: Check if Galaxy DB exists
      ansible.builtin.shell:
        cmd: "psql -XAtc '\\l' |cut -f 1 -d '|' |grep -qw {{ galaxy_db_name }}"
      register: galaxy_db_in_psql
      ignore_errors: true
      become: true
      become_user: postgres
      tags: gal_db
    - name: Restore Galaxy DB backup - pick proper backup version
      ansible.builtin.shell:
        cmd: "if [ '{{ galaxy_db_restore_version }}' = 'latest' ]; then ls -dt {{ postgresql_backup_dir }}/20*Z | head -1; else ls -d {{ postgresql_backup_dir }}/{{ galaxy_db_restore_version }}; fi "
      register: galaxy_db_restore_dir
      ignore_errors: true
      when: galaxy_db_in_psql.rc == 1
      become: true
      become_user: postgres
      tags: gal_db
    - name: Restore Galaxy DB backup - stop postgresql
      ansible.builtin.systemd:
        name: postgresql
        state: stopped
      when: galaxy_db_in_psql.rc == 1 and galaxy_db_restore_dir.rc == 0 and galaxy_db_restore_dir.stdout != ''
      tags: gal_db
    - name: Restore Galaxy DB backup - backup current postgresql
      ansible.builtin.shell:
        cmd: "mv {{ psql_data_dir.stdout }} {{ psql_data_dir.stdout+'.backup_'+ansible_date_time.iso8601 }}"
      when: galaxy_db_in_psql.rc == 1 and galaxy_db_restore_dir.rc == 0 and galaxy_db_restore_dir.stdout != '' and psql_data_dir.stdout != ''
      become: true
      become_user: postgres
      tags: gal_db
    - name: Restore Galaxy DB backup - copy proper backup version
      ansible.builtin.shell:
        cmd: "rsync -a {{ galaxy_db_restore_dir.stdout }}/ {{ psql_data_dir.stdout }}/ && chmod -R 0750 {{ psql_data_dir.stdout }} "
      when: galaxy_db_in_psql.rc == 1 and galaxy_db_restore_dir.rc == 0 and galaxy_db_restore_dir.stdout != '' and psql_data_dir.stdout != ''
      become: true
      become_user: postgres
      tags: gal_db
    - name: Restore Galaxy DB backup - fill postgresql.auto.conf
      ansible.builtin.lineinfile:
        path: "{{ psql_data_dir.stdout }}/postgresql.auto.conf"
        insertafter: EOF
        line: "restore_command = 'cp \"{{ postgresql_backup_dir }}/wal_archive/%f\" \"%p\"'"
        state: present
        create: true
      when: galaxy_db_in_psql.rc == 1 and galaxy_db_restore_dir.rc == 0 and galaxy_db_restore_dir.stdout != '' and psql_data_dir.stdout != ''
      become: true
      become_user: postgres
      tags: gal_db
    - name: Restore Galaxy DB backup - touch the signal file
      ansible.builtin.shell:
        cmd: "touch {{ psql_data_dir.stdout }}/recovery.signal "
      when: galaxy_db_in_psql.rc == 1 and galaxy_db_restore_dir.rc == 0 and galaxy_db_restore_dir.stdout != '' and psql_data_dir.stdout != ''
      become: true
      become_user: postgres
      tags: gal_db
    - name: Restore Galaxy DB backup - start postgresql
      ansible.builtin.systemd:
        name: postgresql
        state: started
      tags: gal_db 
  roles:
    - galaxyproject.tusd
    - usegalaxy_eu.apptainer
    - galaxyproject.galaxy
    - usegalaxy_eu.tpv_auto_lint
    - role: galaxyproject.miniconda
      become: true
      become_user: "{{ galaxy_user_name }}"
    - geerlingguy.redis
#    - usegalaxy_eu.flower
    - galaxyproject.nginx
    - galaxyproject.proftpd
    - geerlingguy.docker
    - usegalaxy_eu.rabbitmqserver
#    - galaxyproject.tiaas2
    - galaxyproject.gxadmin
    - galaxyproject.cvmfs
#    - dj-wasabi.telegraf
  post_tasks:
    - name: Setup gxadmin cleanup task
      ansible.builtin.cron:
        name: "Cleanup Old User Data"
        user: "{{ galaxy_user_name }}" # Run as the Galaxy user
        minute: "0"
        hour: "0"
        job: "GALAXY_LOG_DIR=/tmp/gxadmin/ GALAXY_ROOT={{ galaxy_root }}/server /usr/local/bin/gxadmin galaxy cleanup 60"

    - name: Setup user - group association rutine
      ansible.builtin.cron:
        name: "Add E-infra users to E-infra group"
        user: postgres # Run as the postgres user
        minute: "0"
        hour: "*"
        job: "python3 {{ playbook_dir }}/add_group_users.py {{ inventory_hostname }} {{ api_key }}"
      when: "'usegalaxy' in inventory_hostname"

    - name: RE Galaxy instance patch in lib/galaxy/webapps/galaxy/api/job_files.py
      replace:
        path: "{{ galaxy_root }}/server/lib/galaxy/webapps/galaxy/api/job_files.py"
        regexp: '^(\s*?)shutil\.move\(input_file\.name,\s*path\)\s*$'
        replace: '\1os.chmod(shutil.move(input_file.name, path), 0o664)'
      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname"

    - name: Create pg_dump backup folder if needed
      file:
        path:  "{{ postgresql_backup_dir }}/pg_dump"
        state: directory
        owner: postgres
        group: "{{ galaxy_user_group }}"
        mode:  0750
    - name: Create initial empty pg_dump file if needed # otherwise the following logrotate conf will not work
      file:
        path:  "{{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql.gz"
        state: touch
        owner: postgres
        group: "{{ galaxy_user_group }}"
        mode:  0640
    - name: Set-up Galaxy DB backup using pg_dump and logrotate
      ansible.builtin.blockinfile:
        path: "/etc/logrotate.d/{{ postgresql_pg_dump_prefix }}"
        create: true
        block: |
          {{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql.gz {
            daily
            missingok
            rotate 14
            nocompress
            nocreate
            postrotate
              echo "### Start backup at `date` ###" >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log
              sudo -u postgres pg_dump {{ galaxy_db_name }} --file={{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql --verbose >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log 2>&1
              sudo chmod 640 {{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log 2>&1
              sudo -u postgres gzip {{ postgresql_backup_dir }}/pg_dump/{{ postgresql_pg_dump_prefix }}.sql >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log 2>&1
              echo "### Finished backup at `date` ###" >> /var/log/{{ postgresql_pg_dump_prefix }}_errors.log
            endscript
          }

    - name: Add lines to logrotate config of ProFTPd
      lineinfile:
        path: /etc/logrotate.d/proftpd-core
        line: '{{ item }}'
        insertbefore: BOF
      with_items:
        - /var/log/proftpd/tls.log
        - /var/log/proftpd/sql.log

    - name: Add galaxy user to docker group
      ansible.builtin.user:
        name: "{{ galaxy_user.name }}"
        groups: docker
        append: yes
      ignore_errors: true

    - name: Fix OIDC authnz/xsd error
      ansible.builtin.file:
        path: "{{ galaxy_root}}/server/lib/galaxy/authnz/xsd/__init__.py"
        state: touch
        mode: u=rw,g=r,o=r
      when: "'umsa' in inventory_hostname"

    - name: restart galaxy at the end
      ansible.builtin.shell:
        cmd: galaxyctl restart

    ## Install required Galaxy tools
    - name: Install required tools - create Ephemeris venv
      ansible.builtin.shell:
        cmd: python3 -m venv ~/ephemeris_venv
      tags: tools
    - name: Install required tools - install Ephemeris
      ansible.builtin.shell:
        cmd: source ~/ephemeris_venv/bin/activate && pip install ephemeris
      tags: tools
    - name: Install required tools - install Galaxy tools
      ansible.builtin.shell:
        cmd: ~/ephemeris_venv/bin/shed-tools install -g https://{{ inventory_hostname }} -a {{ admin_apikey }} -t regalaxy_tool_list.yaml
      when: "'galaxy-re' in inventory_hostname or 'galaxy-re' in ansible_hostname"
      tags: tools
    - name: Install required tools - install Galaxy tools
      ansible.builtin.shell:
        cmd: ~/ephemeris_venv/bin/shed-tools install -g https://{{ inventory_hostname }} -a {{ admin_apikey }} -t umsa_tool_list.yaml.lock
      when: "'umsa' in inventory_hostname or 'umsa' in ansible_hostname"
      tags: tools

#    ## Setup Galaxy libraries if needed
#    - name: Set up RCX-data library for UMSA Galaxy
#      ansible.builtin.shell:
#        cmd: "~/ephemeris_venv/bin/python create_libraries.py {{ inventory_hostname }} {{ admin_apikey }} RCX-data 'Recetox data from Sally' '/mnt/sally/000020-Shares/rcx-da/umsa_test'"
#      when: "'umsa' in inventory_hostname and 'umsa' in ansible_hostname"
#      tags: libs
#
#    - name: Set up PARC library for UMSA Galaxy
#      ansible.builtin.shell:
#        cmd: "~/ephemeris_venv/bin/python create_libraries.py {{ inventory_hostname }} {{ admin_apikey }} PARC 'external data' '/mnt/sally/000020-Shares/external/PARC'"
#      when: "'umsa' in inventory_hostname and 'umsa' in ansible_hostname"
#      tags: libs

