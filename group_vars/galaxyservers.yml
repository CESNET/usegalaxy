---
# Galaxy
galaxy_create_user: true # False by default, as e.g. you might have a 'galaxy' user provided by LDAP or AD.
galaxy_separate_privileges: true # Best practices for security, configuration is owned by 'root' (or a different user) than the processes
galaxy_manage_paths: true # False by default as your administrator might e.g. have root_squash enabled on NFS. Here we can create the directories so it's fine.
galaxy_manage_cleanup: true
galaxy_layout: root-dir
galaxy_root: /srv/galaxy
galaxy_tool_dependency_dir: "{{ galaxy_mutable_data_dir }}/dependencies"
galaxy_user_group:
  name: "{{ galaxy_user_group_name }}"
  gid: "{{ galaxy_user_group_gid }}"
galaxy_user:
  name: "{{ galaxy_user_name }}"
  uid: "{{ galaxy_user_id }}"
  group: "{{ galaxy_user_group.name }}"
  shell: /bin/bash
# 1ad49865fbeb03551cf7774dc0c12e5cd27ff797 commit_id z galaxy-cz
# 7a9ba0c6529d72517c7627422eac16eadff15b46 commit_id posledne, ktore fungovalo
#galaxy_commit_id: release_23.0 # 7a9ba0c6529d72517c7627422eac16eadff15b46 # release_23.0
galaxy_commit_id: 72070dbd0a6d0f418d0b8f914825ea2b8e6a0a88
#galaxy_force_checkout: true
miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/conda"
miniconda_version: 'latest' # 23.5.2 # 23.5.0 # 4.12.0
miniconda_channels: ['conda-forge', 'bioconda', 'iuc', 'r', 'anaconda', 'petrnovak', 'defaults']
miniconda_base_env_packages: ['mamba']

singularity_local_cache_dir: "{{ galaxy_mutable_data_dir }}/cache/singularity"

# Galaxy Job Configuration
galaxy_job_config:
  runners:
    local_runner:
      load: galaxy.jobs.runners.local:LocalJobRunner
      workers: 4
    pulsar_runner:
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      galaxy_url: "https://{{ inventory_hostname }}{{ galaxy_prefix }}"
      amqp_url: "pyamqp://pulsar:{{ rabbitmq_users_password.pulsar }}@{{ inventory_hostname }}:5671//pulsar?ssl=1"
      amqp_acknowledge: true
      amqp_ack_republish_time: 1200
      amqp_consumer_timeout: 2
      amqp_publish_retry: true
      amqp_publish_retry_max_retries: 60
      manager: _default_
    pulsar_tpv_runner:
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      galaxy_url: "https://{{ inventory_hostname }}{{ galaxy_prefix }}"
      amqp_url: "pyamqp://pulsar:{{ rabbitmq_users_password.pulsar }}@{{ inventory_hostname }}:5671//pulsar?ssl=1"
      amqp_acknowledge: true
      amqp_ack_republish_time: 1200
      amqp_consumer_timeout: 2
      amqp_publish_retry: true
      amqp_publish_retry_max_retries: 60
      manager: test
    pulsar_long_and_big_runner:
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      galaxy_url: "https://{{ inventory_hostname }}{{ galaxy_prefix }}"
      amqp_url: pyamqp://pulsar:{{ rabbitmq_users_password.pulsar }}@{{ inventory_hostname }}:5671//pulsar?ssl=1
      amqp_ack_republish_time: 1200
      amqp_acknowledge: true
      amqp_consumer_timeout: 2
      amqp_publish_retry: true
      amqp_publish_retry_max_retries: 60
      manager: long_and_big
  handling:
    assign: ['db-skip-locked']
  execution:
    default: tpv_dispatcher
    environments:
      local:
        runner: local_runner
        tmp_dir: true
      local_singularity:
        runner: local_runner
        singularity_enabled: true
        #singularity_volumes: "$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/cvmfs/data.galaxyproject.org:ro"
        #singularity_default_container_id: "/cvmfs/singularity.galaxyproject.org/all/python:3.8.3"
        container_resolvers: 
          - type: explicit_singularity
          - type: cached_mulled_singularity
            cache_directory: "{{ singularity_local_cache_dir }}/mulled"
          - type: mulled_singularity
        env:
        # Ensuring a consistent collation environment is good for reproducibility.
        - name: LC_ALL
          value: C
        # The cache directory holds the docker containers that get converted
        - name: SINGULARITY_CACHEDIR
          value: "{{ singularity_local_cache_dir }}"
        # Apptainer uses a temporary directory to build the squashfs filesystem
        - name: SINGULARITY_TMPDIR
          value: /tmp
      pulsar_singularity:
        runner: pulsar_runner
        default_file_action: remote_transfer
        dependency_resolution: remote
        jobs_directory: "/storage/brno11-elixir/home/galaxyelixir/pulsar-re/files/staging"
        persistence_directory: "/opt/pulsar/files/persistent"
        remote_metadata: false
        rewrite_parameters: true
        transport: curl
        outputs_to_working_directory: false
        ## specified in pulsar
        #submit_native_specification: '-l select=1:ncpus=2:mem=8gb:scratch_local=50gb -l walltime=12:00:00 -q elixirre@elixir-pbs.elixir-czech.cz' 
        singularity_enabled: true
        singularity_volumes: "$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/cvmfs/data.galaxyproject.org:ro,$SCRATCHDIR"
        singularity_default_container_id: "/cvmfs/singularity.galaxyproject.org/all/python:3.8.3"
        ## Following configuration works!
        # singularity_volumes: "$job_directory:rw,$tool_directory:ro,$job_directory/outputs:rw,$working_directory:rw,/cvmfs/data.galaxyproject.org:ro"
#        container_resolvers: 
#          - type: explicit_singularity
#          - type: cached_mulled_singularity
#            cache_directory: "{{ galaxy_mutable_data_dir }}/cache/singularity/mulled/"
#          - type: mulled_singularity
        env:
        # The cache directory holds the docker containers that get converted
        - name:  SINGULARITY_CACHEDIR
          value: "/storage/brno11-elixir/home/galaxyelixir/pulsar-re/files/singularity_cache"
        # Apptainer uses a temporary directory to build the squashfs filesystem
        - name:  SINGULARITY_TMPDIR
          value: "$SCRATCHDIR/tmp"
        # Ensuring a consistent collation environment is good for reproducibility.
        - name:  LC_ALL
          value: C
        - name:  TMPDIR
          value: "$SCRATCHDIR"
        - name:  TMP
          value: "$SCRATCHDIR"
        - name:  TEMP
          value: "$SCRATCHDIR"
        - name:  XDG_CACHE_HOME
          value: "$SCRATCHDIR"
        - name: GALAXY_SLOTS
          value: "2"
        - name: GALAXY_MEMORY_MB
          value: "8000"
      pulsar:
        runner: pulsar_runner
        default_file_action: remote_transfer
        transport: curl
        dependency_resolution: remote
        jobs_directory: /storage/brno11-elixir/home/galaxyelixir/pulsar-re/files/staging
        outputs_to_working_directory: false
        persistence_directory: /opt/pulsar/files/persistent
        remote_metadata: false
        rewrite_parameters: true
        env:
        - name: LC_ALL
          value: C
        - name: TMPDIR
          value: $SCRATCHDIR
        - name: TMP
          value: $SCRATCHDIR
        - name: TEMP
          value: $SCRATCHDIR
        - name:  XDG_CACHE_HOME
          value: "$SCRATCHDIR"
        - name: GALAXY_SLOTS
          value: "2"
        - name: GALAXY_MEMORY_MB
          value: "8000"
      pulsar_long_and_big:
        runner: pulsar_long_and_big_runner
        default_file_action: remote_transfer
        transport: curl
        dependency_resolution: remote
        jobs_directory: /storage/brno11-elixir/home/galaxyelixir/pulsar-re/files/staging
        outputs_to_working_directory: false
        persistence_directory: /opt/pulsar/files/persistent
        remote_metadata: false
        rewrite_parameters: true
        env:
        -   name: LC_ALL
            value: C
        -   name: TMPDIR
            value: $SCRATCHDIR
        -   name: TMP
            value: $SCRATCHDIR
        -   name: TEMP
            value: $SCRATCHDIR
        -   name: GALAXY_SLOTS
            value: "16"
        -   name: GALAXY_MEMORY_MB
            value: "64000"

      tpv_dispatcher:
        runner: dynamic
        type: python
        function: map_tool_to_destination
        rules_module: tpv.rules
        tpv_config_files:
#          - https://raw.githubusercontent.com/galaxyproject/tpv-shared-database/main/tools.yml
          - "{{ tpv_config_dir }}/tpv_rules_local.yml"
  tools:
    - class: local # these special tools that aren't parameterized for remote execution - expression tools, upload, etc
      environment: local
    - id: cat1
      environment: local
    - id: __DATA_FETCH__
      environment: local
    - id: gff2bed1
      environment: local
#    - id: bed2gff1
#      environment: local
    - id: Extract_features1
      environment: local
    - id: testing_html
      environment: tpv_dispatcher

galaxy_config:
  galaxy:
    # Main Configuration
    #enable_oidc: true
    #oidc_config_file: "{{ galaxy_config_dir }}/oidc_config.xml"
    #oidc_backends_config_file: "{{ galaxy_config_dir }}/oidc_backends_config.xml"
    #logo_src: "https://www.e-infra.cz/img/logo.svg"
    #themes_config_file: "{{ galaxy_config_dir }}/themes.yml"
    galaxy_url_prefix: "{{ galaxy_prefix }}"
    admin_users:
    - xdemko@repeatexplorer-elixir.cerit-sc.cz
    - kavonrtep@repeatexplorer-elixir.cerit-sc.cz
    - salvet@repeatexplorer-elixir.cerit-sc.cz
    database_connection: "postgresql:///{{ galaxy_db_name }}?host=/var/run/postgresql"
    #umask: 022
    file_path: "{{ galaxy_data_dir }}/datasets"
    new_file_path: "{{ galaxy_data_dir }}/tmp"
    job_working_directory: "{{ galaxy_data_dir }}/jobs"
    object_store_store_by: uuid
    object_store_config_file: "{{ galaxy_config_dir }}/object_store_conf.xml"
    id_secret: "{{ vault_id_secret }}"
    job_config: "{{ galaxy_job_config }}" # Use the variable we defined above
    job_resource_params_file: "{{ galaxy_config_dir }}/job_resource_params_conf.xml"
    auth_config_file: "{{ galaxy_config_dir }}/auth_conf.xml"
    tool_config_file: 
    - "{{ galaxy_config_dir }}/local_tool_conf.xml"
    - "{{ galaxy_root }}/server/config/tool_conf.xml.sample"
    tool_sheds_config_file: "{{ galaxy_config_dir }}/tool_sheds_conf.xml"
    sanitize_allowlist_file: "{{ galaxy_mutable_config_dir }}/sanitize_allowlist.txt"
    # This allows to do custom ordering of tools in sections, default was true, but Petr Novak wants specific orderring of tools
    toolbox_auto_sort: false
    smtp_server: "rs.cesnet.cz:25"
    error_email_to: "regalaxy@rt.cesnet.cz"
    email_from: "regalaxy@rt.cesnet.cz"
    # SQL Performance
    slow_query_log_threshold: 5
    enable_per_request_sql_debugging: true
    # File serving Performance
    nginx_x_accel_redirect_base: /_x_accel_redirect
    # Automation / Ease of Use / User-facing features
    watch_job_rules: 'polling' # used to be auto
    allow_path_paste: true
    enable_quotas: true
    allow_user_deletion: true
    require_login: true
    #show_welcome_with_login: true
    expose_user_name: true
    expose_dataset_path: true
    expose_potentially_sensitive_job_metrics: true
    # NFS workarounds
    retry_job_output_collection: 3
    # Debugging
    cleanup_job: onsuccess
    allow_user_impersonation: true
    debug: true
    # Tool security
    outputs_to_working_directory: true
    new_user_dataset_access_role_default_private: true # Make datasets private by default
    # TUS
    galaxy_infrastructure_url: "https://{{ inventory_hostname }}"
    tus_upload_store: "{{ galaxy_tus_upload_store }}"
    # CVMFS
#    tool_data_table_config_path: /cvmfs/data.galaxyproject.org/byhand/location/tool_data_table_conf.xml,/cvmfs/data.galaxyproject.org/managed/location/tool_data_table_conf.xml
    # Tool Dependencies
    conda_exec: "{{ miniconda_prefix }}/bin/mamba"
    conda_ensure_channels: conda-forge,bioconda,iuc,r,anaconda,petrnovak,defaults
    dependency_resolvers_config_file: "{{ galaxy_config_dir }}/dependency_resolvers_conf.xml"
    containers_resolvers_config_file: "{{ galaxy_config_dir }}/containers_resolvers_conf.yml"
    # Data Library Directories
#    library_import_dir: /libraries/admin
#    user_library_import_dir: /libraries/user
    # Celery
    amqp_internal_connection: "pyamqp://galaxy:{{ rabbitmq_users_password.galaxy }}@localhost:5671/galaxy_internal?ssl=1"
    celery_conf:
      result_backend: "redis://localhost:6379/0"
    enable_celery_tasks: true
    # Monitoring
#    statsd_host: localhost
#    statsd_influxdb: true
    # FTP
    ftp_upload_dir: "{{ galaxy_data_dir }}/uploads"
    ftp_upload_site: "{{ inventory_hostname }}"
#    default_panel_view: general_tool_panel
#    panel_views:
#    - name: General Tool Panel
#      type: generic
#      id: general_tool_panel
#      items:
#      - type: section
#        name: "Test section"
#        id: test_section
#        items:
#        - type: tool
#          id: testing_pbs
#        - type: tool
#          id: testing_html
#        - type: tool
#          id: testing
  gravity:
    process_manager: systemd
    galaxy_root: "{{ galaxy_root }}/server"
    galaxy_user: "{{ galaxy_user.name }}"
    virtualenv: "{{ galaxy_venv_dir }}"
    #umask: 022
    gunicorn:
      # listening options
      bind: "unix:{{ galaxy_mutable_config_dir }}/gunicorn.sock"
      # performance options
      workers: 2
      # Other options that will be passed to gunicorn
      # This permits setting of 'secure' headers like REMOTE_USER (and friends)
      # https://docs.gunicorn.org/en/stable/settings.html#forwarded-allow-ips
      extra_args: '--forwarded-allow-ips="*"'
      # This lets Gunicorn start Galaxy completely before forking which is faster.
      # https://docs.gunicorn.org/en/stable/settings.html#preload-app
      preload: true
    celery:
      enable_beat: true
      enable: true
      queues: celery,galaxy.internal,galaxy.external
      pool: threads
      memory_limit: 4
      concurrency: 2
      loglevel: DEBUG
    tusd:
      enable: true
      tusd_path: /usr/local/sbin/tusd
      upload_dir: "{{ galaxy_tus_upload_store }}"
    handlers:
      handler:
        processes: 2
        pools:
          - job-handlers
          - workflow-schedulers
#    reports:
#      enable: true
#      url_prefix: /reports
#      bind: "unix:{{ galaxy_mutable_config_dir }}/reports.sock"
#      config_file: "{{ galaxy_config_dir }}/reports.yml"

galaxy_job_config_file: "{{ galaxy_config_dir }}/galaxy.yml"

galaxy_config_files_public:
  - src: files/galaxy/static/welcome.html
    dest: "{{ galaxy_mutable_config_dir }}/welcome.html"
#  - src: files/galaxy/static/style/base.css
#    dest: "{{ galaxy_server_dir }}/static/style/base.css"
  - src: files/galaxy/static/images/umbr_programs_icons/RE_header.png
    dest: "{{ galaxy_server_dir }}/static/images/umbr_programs_icons/RE_header.png"
  - src: files/galaxy/static/images/umbr_programs_icons/ELIXIR_CZECHREPUBLIC_white_background_small.png
    dest: "{{ galaxy_server_dir }}/static/images/umbr_programs_icons/ELIXIR_CZECHREPUBLIC_white_background_small.png"
  - src: files/galaxy/static/images/umbr_programs_icons/RE_logo.png
    dest: "{{ galaxy_server_dir }}/static/images/umbr_programs_icons/RE_logo.png"

galaxy_config_files:
#  - src: files/galaxy/themes.yml
#    dest: "{{ galaxy_config.galaxy.themes_config_file }}"
  - src: files/galaxy/config/tpv_rules_local.yml
    dest: "{{ tpv_mutable_dir }}/tpv_rules_local.yml"

galaxy_config_templates:
  - src: templates/galaxy/config/auth_conf.xml.j2
    dest: "{{ galaxy_config.galaxy.auth_config_file }}"
  - src: templates/galaxy/config/tool_sheds_conf.xml
    dest: "{{ galaxy_config.galaxy.tool_sheds_config_file }}"

  - src: templates/galaxy/config/local_tool_conf.xml
    dest: "{{ galaxy_config.galaxy.tool_config_file[0] }}"
  - src: regalaxy_integrated_tool_panel.xml
    dest: "{{ galaxy_mutable_config_dir }}/integrated_tool_panel.xml"

  - src: templates/galaxy/config/container_resolvers_conf.yml.j2
    dest: "{{ galaxy_config.galaxy.containers_resolvers_config_file }}"
  - src: templates/galaxy/config/dependency_resolvers_conf.xml
    dest: "{{ galaxy_config.galaxy.dependency_resolvers_config_file }}"
  - src: templates/galaxy/config/sanitize_allowlist.txt
    dest: "{{ galaxy_config.galaxy.sanitize_allowlist_file }}"
  - src: "templates/galaxy/config/object_store_conf.xml.j2"
    dest: "{{ galaxy_config.galaxy.object_store_config_file }}"
#  - src: templates/galaxy/config/reports.yml
#    dest: "{{ galaxy_config.gravity.reports.config_file }}"
#  - src: templates/galaxy/config/oidc_config.xml
#    dest: "{{ galaxy_config_dir }}/oidc_config.xml"
#  - src: templates/galaxy/config/oidc_backends_config.xml
#    dest: "{{ galaxy_config_dir }}/oidc_backends_config.xml"

galaxy_extra_dirs:
  - "{{ galaxy_data_dir }}"
  - "{{ galaxy_config_dir }}/{{ tpv_config_dir_name }}"

galaxy_extra_privsep_dirs:
  - "{{ tpv_mutable_dir }}"
tpv_privsep: true

galaxy_local_tools:
- testing.xml
- testing_html.xml
- testing_pbs.xml

# Certbot
certbot_auto_renew_hour: "{{ 23 |random(seed=inventory_hostname)  }}"
certbot_auto_renew_minute: "{{ 59 |random(seed=inventory_hostname)  }}"
certbot_auth_method: --webroot
certbot_install_method: virtualenv
certbot_auto_renew: yes
certbot_auto_renew_user: root
certbot_environment: production
certbot_well_known_root: /srv/nginx/_well-known_root
certbot_share_key_users:
  - www-data
  - proftpd
certbot_share_key_ids:
  - "999:999"
certbot_post_renewal: |
    systemctl restart nginx || true
    docker restart rabbit_hole || true
    systemctl restart proftpd || true
certbot_domains:
 - "{{ inventory_hostname }}"
# - "repeatexplorer-elixir.cerit-sc.cz"
#certbot_expand: true
certbot_agree_tos: --agree-tos

# NGINX
nginx_selinux_allow_local_connections: true
nginx_servers:
  - redirect-ssl
nginx_ssl_servers:
  - galaxy
#  - galaxy_with_prefix
#  - sentry
nginx_enable_default_server: false
nginx_conf_http:
  # client_max_body_size: 1g
  # gzip: "on" # This is enabled by default in Ubuntu, and the duplicate directive will cause a crash.
  gzip_proxied: "any"
  gzip_static: "on"   # The ngx_http_gzip_static_module module allows sending precompressed files with the ".gz" filename extension instead of regular files.
  gzip_vary: "on"
  gzip_min_length: 128
  gzip_comp_level: 6  # Tradeoff of better compression for slightly more CPU time.
  gzip_types: |
      text/plain
      text/css
      text/xml
      text/javascript
      application/javascript
      application/x-javascript
      application/json
      application/xml
      application/xml+rss
      application/xhtml+xml
      application/x-font-ttf
      application/x-font-opentype
      image/png
      image/svg+xml
      image/x-icon
nginx_ssl_role: usegalaxy_eu.certbot
#nginx_conf_ssl_certificate: /etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem
#nginx_conf_ssl_certificate_key: /etc/letsencrypt/live/{{ inventory_hostname }}/privkey.pem
nginx_conf_ssl_certificate: /etc/ssl/certs/fullchain.pem
nginx_conf_ssl_certificate_key: /etc/ssl/user/privkey-www-data.pem

#Install pip docker package for ansible
pip_install_packages:
  - docker
  - python-ldap

# RabbitMQ
rabbitmq_hostname: "{{ inventory_hostname }}"
rabbitmq_container:
  name: rabbit_hole
  image: rabbitmq:3.11-management
  hostname: "{{ inventory_hostname }}"

rabbitmq_plugins:
  - rabbitmq_management

rabbitmq_config:
  listeners:
    tcp: none
  ssl_listeners:
    default: 5671
  ssl_options:
    verify: verify_peer
    cacertfile: /etc/ssl/certs/fullchain.pem
    certfile: /etc/ssl/certs/cert.pem
    keyfile: /etc/ssl/user/privkey-999:999.pem
    fail_if_no_peer_cert: 'false'
  management_agent:
    disable_metrics_collector: 'false'
  management:
    disable_stats: 'false'
  consumer_timeout: 21600000 # 6 hours in milliseconds

rabbitmq_vhosts:
  - /pulsar
  - galaxy_internal

rabbitmq_users:
  - user: admin
    password: "{{ rabbitmq_users_password.mqadmin }}"
    tags: administrator
    vhost: /
  - user: pulsar
    password: "{{ rabbitmq_users_password.pulsar }}"
    vhost: /pulsar
  - user: galaxy
    password: "{{ rabbitmq_users_password.galaxy }}"
    vhost: galaxy_internal
  - user: flower
    password: "{{ rabbitmq_users_password.flower }}"
    tags: administrator
    vhost: galaxy_internal

# TUS
galaxy_tusd_port: 1080
galaxy_tus_upload_store: "{{ galaxy_data_dir }}/tus"

#Redis
galaxy_additional_venv_packages:
  - redis

# Flower
flower_python_version: python3
flower_bind_interface: localhost
flower_port: 5555
flower_app_dir: "{{ galaxy_root }}"
flower_python_path: "{{ galaxy_root }}/server/lib"
flower_venv_dir: "{{ galaxy_venv_dir }}"
flower_app_name: galaxy.celery
flower_db_file: "{{ galaxy_root }}/var/flower.db"
flower_persistent: true
flower_broker_api: "https://flower:{{ rabbitmq_users_password.flower }}@localhost:5671/api/"
flower_broker_url: "pyamqp://flower:{{ rabbitmq_users_password.flower }}@localhost:5671/galaxy_internal?ssl=1"
#flower_broker_url: "pyamqp://flower:{{ rabbitmq_users_password.flower }}@{{ inventory_hostname }}:5671/galaxy_internal?ssl=1"
flower_proxy_prefix: /flower
flower_user: "{{ galaxy_user.name }}"
flower_group: "{{ galaxy_user.group }}"
flower_ui_users:
  - name: admin
    password: "{{ flower_admin_password }}"

flower_environment_variables:
  GALAXY_CONFIG_FILE: "{{ galaxy_config_file }}"

# Proftpd:
proftpd_galaxy_auth: yes
galaxy_ftp_upload_dir: "{{ galaxy_config.galaxy.ftp_upload_dir }}"
proftpd_display_connect: |
  {{ inventory_hostname }} FTP server

  Unauthorized access is prohibited
proftpd_create_ftp_upload_dir: yes
proftpd_options:
  - User: "{{ galaxy_user.name }}"
  - Group: "{{ galaxy_user.group }}"
  - Port: 21
#proftpd_sql_db: "{{ galaxy_db_name }}?host=/var/run/postgresql" #galaxy@/var/run/postgresql
proftpd_sql_db: "{{ galaxy_db_name }}@/var/run/postgresql"
proftpd_sql_user: "{{ galaxy_user.name }}"
#proftpd_conf_ssl_certificate: /etc/letsencrypt/live/{{ inventory_hostname }}/cert.pem
#proftpd_conf_ssl_certificate_key: /etc/letsencrypt/live/{{ inventory_hostname }}/privkey.pem
proftpd_conf_ssl_certificate: /etc/ssl/certs/cert.pem
proftpd_conf_ssl_certificate_key: /etc/ssl/user/privkey-proftpd.pem
proftpd_global_options:
  - PassivePorts: 56000 60000
proftpd_use_mod_tls_shmcache: false
proftpd_tls_options: NoSessionReuseRequired
