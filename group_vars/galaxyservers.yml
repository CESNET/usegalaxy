---
# defaults for host-specific vars
csnt_brand: ""
csnt_contact_email: "galaxy@cesnet.cz"
csnt_short_term_storage_dir: short_term_web_storage
csnt_enable_account_interface: true
csnt_log_level: WARNING
csnt_allow_user_deletion: false
csnt_enable_notification_system: false
csnt_enable_oidc: true
csnt_oidc_config_file: "{{ galaxy_config_dir }}/oidc_config.xml"
csnt_oidc_backends_config_file: "{{ galaxy_config_dir }}/oidc_backends_config.xml"
csnt_enable_reports: false
csnt_edam_panel_views: ""
csnt_default_panel_view: default
csnt_registered_user_jobs_limit: 10
csnt_tool_config_file:
  - "{{ galaxy_config_dir }}/tool_conf.xml"
  - "{{ galaxy_config_dir }}/local_tool_conf.xml"
csnt_library_import_dir: null
csnt_user_library_import_dir: null
csnt_allow_path_paste: false
csnt_tool_sheds_config_file: "{{ galaxy_root }}/server/config/tool_sheds_conf.xml.sample"
csnt_galaxy_tmpclean_dirs:
  - "{{ galaxy_config.galaxy.job_working_directory }}"
  - "{{ galaxy_config.galaxy.new_file_path }}"
  - "{{ galaxy_tus_upload_store if galaxy_config.gravity.tusd.enable else ' ' }}"
csnt_require_login: true

admin_ssh_keys: false
enable_telegraf: false
enable_flower: false
enable_tiaas: true
shed_tools_shadowing: false

# Galaxy
galaxy_manage_systemd: no
galaxy_create_user: true # False by default, as e.g. you might have a 'galaxy' user provided by LDAP or AD.
galaxy_separate_privileges: true # Best practices for security, configuration is owned by 'root' (or a different user) than the processes
galaxy_manage_paths: true # False by default as your administrator might e.g. have root_squash enabled on NFS. Here we can create the directories so it's fine.
galaxy_manage_cleanup: true # Requires tmpwatch(8) or tmpreaper(8) present
galaxy_tmpclean_dirs: "{{ csnt_galaxy_tmpclean_dirs }}"
galaxy_layout: root-dir
galaxy_root: /srv/galaxy
galaxy_mutable_config_dir: "{{ galaxy_root }}/var/config"
galaxy_gravity_state_dir: "{{ galaxy_root }}/var/gravity"
galaxy_tool_dependency_dir: "{{ galaxy_root }}/var/dependencies"
galaxy_user: {name: "{{ galaxy_user_name }}", shell: /bin/bash}
galaxy_commit_id: release_24.2
galaxy_force_checkout: true
galaxy_job_config_file: "{{ galaxy_config_dir }}/galaxy.yml"

# Miniconda
miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/_conda"
miniconda_version: 24.11.1
miniconda_channels: ['conda-forge', 'defaults']

# Pulsar
pulsar_data_dir: "/storage/{{ pulsar.nfs_home }}/home/{{ pulsar.user_name }}/{{ pulsar.nfs_prefix }}"

# Galaxy Job Configuration
galaxy_job_config:
  runners:
    local_runner:
      load: galaxy.jobs.runners.local:LocalJobRunner
      workers: 4
    pulsar_tpv_runner:
      load: galaxy.jobs.runners.pulsar:PulsarMQJobRunner
      galaxy_url: "https://{{ rabbitmq_hostname }}"
      amqp_url: "pyamqp://{{ pulsar.user_name }}:{{ rabbitmq_users_password.pulsar }}@{{ rabbitmq_hostname }}:5671/pulsar?ssl=1"
      amqp_acknowledge: true
      amqp_ack_republish_time: 1200
      amqp_consumer_timeout: 2
      amqp_publish_retry: true
      amqp_publish_retry_max_retries: 60
      manager: _default_
  handling:
    assign: ['db-skip-locked']
  execution:
    default: tpv_dispatcher
    environments:
      local_env:
        runner: local_runner
        tmp_dir: true
      tpv_dispatcher:
        runner: dynamic
        type: python
        function: map_tool_to_destination
        rules_module: tpv.rules
        tpv_config_files:
          - https://gxy.io/tpv/db-v2.yml
          - "{{ tpv_config_dir }}/tpv_rules_meta.yml"
          - "{{ tpv_config_dir }}/tpv_rules_{{ inventory_hostname }}.yml"
  resources:
    default: default
    groups:
      default: []
      testing: [cores, time]
  limits:
    - type: registered_user_concurrent_jobs
      value: "{{ csnt_registered_user_jobs_limit }}"
    - type: anonymous_user_concurrent_jobs
      value: 1
    - type: output_size
      value: 50GB
  tools:
    - class: local # these special tools that aren't parameterized for remote execution - expression tools, upload, etc
      environment: local_env

galaxy_config:
  galaxy:
    # Main Configuration
    # To not bother the main disk
    new_file_path: "{{ galaxy_mutable_data_dir }}/tmp"
    object_store_config_file: "{{ galaxy_config_dir }}/object_store_conf.xml"
    enable_oidc: "{{ csnt_enable_oidc }}"
    oidc_config_file: "{{ csnt_oidc_config_file }}"
    oidc_backends_config_file: "{{ csnt_oidc_backends_config_file }}"
    logo_src: "https://www.e-infra.cz/img/logo.svg"
    themes_config_file: "{{ galaxy_config_dir }}/themes.yml"
    admin_users: "{{ vault_admin_users }}"
    cleanup_job: onsuccess
    smtp_server: "rs.cesnet.cz:25"
    error_email_to: "{{  csnt_contact_email  }}"
    allow_user_creation: false
    require_login: "{{ csnt_require_login }}"
    database_connection: "postgresql:///{{ galaxy_db_name }}?host=/var/run/postgresql"
    file_path: "{{ galaxy_mutable_data_dir }}/datasets"
    short_term_storage_dir: "{{ csnt_short_term_storage_dir }}"
    job_working_directory: "{{ galaxy_mutable_data_dir }}/jobs"
    object_store_store_by: uuid
    id_secret: "{{ vault_id_secret }}"
    job_config: "{{ galaxy_job_config }}" # Use the variable we defined above
    vault_config_file: vault_conf.yml
    tool_config_file: "{{ csnt_tool_config_file }}"
    tool_sheds_config_file: "{{ csnt_tool_sheds_config_file }}"
    sanitize_allowlist_file: "{{ galaxy_mutable_config_dir }}/sanitize_allowlist.txt"
    # SQL Performance
    slow_query_log_threshold: 5
    enable_per_request_sql_debugging: true
    # File serving Performance
    nginx_x_accel_redirect_base: /_x_accel_redirect
    # Automation / Ease of Use / User-facing features
    brand: "{{ csnt_brand }}"
    enable_account_interface: "{{ csnt_enable_account_interface }}"
    enable_notification_system: "{{ csnt_enable_notification_system }}"
    watch_job_rules: 'auto'
    allow_path_paste: "{{ csnt_allow_path_paste }}"
    enable_quotas: true
    allow_user_deletion: "{{ csnt_allow_user_deletion }}"
    show_welcome_with_login: true
    expose_user_name: true
    expose_dataset_path: true
    expose_potentially_sensitive_job_metrics: true
    edam_panel_views: "{{ csnt_edam_panel_views }}"
    default_panel_view: "{{ csnt_default_panel_view }}"
    panel_views_dir: "{{ galaxy_config_dir }}/plugins/activities"
    file_source_templates_config_file: "{{ galaxy_config_dir }}/file_source_templates.yml"
    # NFS workarounds
    retry_job_output_collection: 3
    # Debugging
    allow_user_impersonation: true
    log_level: "{{ csnt_log_level }}"
    # Tool security
    outputs_to_working_directory: true
    new_user_dataset_access_role_default_private: true # Make datasets private by default
    # TUS
    galaxy_infrastructure_url: "https://{{ inventory_hostname }}"
    tus_upload_store: "{{ galaxy_tus_upload_store }}"
    # CVMFS
    tool_data_table_config_path:
    - /cvmfs/data.galaxyproject.org/byhand/location/tool_data_table_conf.xml
    - /cvmfs/data.galaxyproject.org/managed/location/tool_data_table_conf.xml
    # Tool Dependencies
    container_resolvers:
    -   type: explicit_singularity
    -   cache_directory: /cvmfs/singularity.galaxyproject.org/all/
        type: cached_mulled_singularity
    -   auto_install: true
        type: mulled_singularity
    # Data Library Directories
    library_import_dir: "{{ csnt_library_import_dir }}"
    user_library_import_dir: "{{ csnt_user_library_import_dir }}"
    # Celery
    amqp_internal_connection: "pyamqp://galaxy:{{ vault_rabbitmq_password_galaxy }}@localhost:5671/galaxy_internal?ssl=1"
    celery_conf:
      result_backend: "redis://localhost:6379/0"
    enable_celery_tasks: true
    # Monitoring
    statsd_host: localhost
    statsd_influxdb: true
    # FTP
    ftp_upload_dir: "{{ galaxy_mutable_data_dir }}/uploads"
    ftp_upload_site: "{{ inventory_hostname }}"
  gravity:
    process_manager: systemd
    galaxy_root: "{{ galaxy_root }}/server"
    galaxy_user: "{{ galaxy_user_name }}"
    virtualenv: "{{ galaxy_venv_dir }}"
    gunicorn:
      # listening options
      bind: "unix:{{ galaxy_mutable_config_dir }}/gunicorn.sock"
      # performance options
      workers: 2
      # Other options that will be passed to gunicorn
      # This permits setting of 'secure' headers like REMOTE_USER (and friends)
      # https://docs.gunicorn.org/en/stable/settings.html#forwarded-allow-ips
      extra_args: '--forwarded-allow-ips="*"'
      # This lets Gunicorn start Galaxy completely before forking which is faster.
      # https://docs.gunicorn.org/en/stable/settings.html#preload-app
      preload: true
    celery:
      enable_beat: true
      enable: true
      queues: celery,galaxy.internal,galaxy.external
      pool: threads
      memory_limit: 2
      concurrency: 2
      loglevel: DEBUG
    tusd:
      enable: true
      tusd_path: /usr/local/sbin/tusd
      upload_dir: "{{ galaxy_tus_upload_store }}"
    handlers:
      handler:
        processes: 2
        pools:
          - job-handlers
          - workflow-schedulers
    reports:
      enable: "{{ csnt_enable_reports }}"
      url_prefix: /reports
      bind: "unix:{{ galaxy_mutable_config_dir }}/reports.sock"
      config_file: "{{ galaxy_config_dir }}/reports.yml"


galaxy_config_files_public:
  - src: templates/{{ inventory_hostname }}/static/welcome.html
    dest: "{{ galaxy_mutable_config_dir }}/welcome.html"
  - src: files/galaxy/static/usegalaxycz_straight.svg
    dest: "{{ galaxy_server_dir }}/static/usegalaxycz_straight.svg"
  - src: files/galaxy/static/elixir_logo.png
    dest: "{{ galaxy_server_dir }}/static/elixir_logo.png"
  - src: files/galaxy/static/eu_msmt_eosc.svg
    dest: "{{ galaxy_server_dir }}/static/eu_msmt_eosc.svg"
  - src: files/galaxy/static/e-infra_logo.svg
    dest: "{{ galaxy_server_dir }}/static/e-infra_logo.svg"

galaxy_config_templates:
  - src: templates/galaxy/config/reports.yml.j2
    dest: "{{ galaxy_config.gravity.reports.config_file }}"
  - src: "{{ lookup('first_found', ['templates/'+inventory_hostname+'/config/oidc_backends_config.xml.j2', 'templates/galaxy/config/oidc_backends_config.xml.j2']) }}"
    dest: "{{ galaxy_config_dir }}/oidc_backends_config.xml"
  - src: "templates/{{ inventory_hostname }}/config/object_store_conf.xml.j2"
    dest: "{{ galaxy_config.galaxy.object_store_config_file }}"
  - src: "templates/{{ inventory_hostname }}/config/local_tool_conf.xml.j2"
    dest: "{{ galaxy_config_dir }}/local_tool_conf.xml"
  - src: templates/galaxy/config/tpv_rules_meta.yml.j2
    dest: "{{ tpv_mutable_dir }}/tpv_rules_meta.yml"
  - src: "templates/galaxy/config/vault_conf.yml.j2"
    dest: "{{ galaxy_config_dir }}/vault_conf.yml"
  - src: "{{ lookup('first_found', ['templates/'+inventory_hostname+'/config/file_source_templates.yml.j2', 'templates/galaxy/config/file_source_templates.yml.j2']) }}"
    dest: "{{ galaxy_config_dir }}/file_source_templates.yml"

galaxy_extra_dirs:
  - "{{ tpv_config_dir }}"
  - "{{ galaxy_config_dir }}/plugins/activities"

galaxy_extra_privsep_dirs:
  - "{{ tpv_mutable_dir }}"
  - "{{ galaxy_mutable_config_dir }}"
tpv_privsep: true

# Certbot
certbot_auto_renew_hour: "{{ 23 |random(seed=inventory_hostname)  }}"
certbot_auto_renew_minute: "{{ 59 |random(seed=inventory_hostname)  }}"
certbot_auth_method: --webroot
certbot_install_method: virtualenv
certbot_auto_renew: yes
certbot_auto_renew_user: root
certbot_environment: production
certbot_well_known_root: /srv/nginx/_well-known_root
certbot_share_key_users:
  - www-data
  - proftpd
certbot_share_key_ids:
  - "999:999"
certbot_post_renewal: |
    systemctl restart nginx || true
    docker restart rabbit_hole || true
    systemctl restart proftpd || true
# the order in domain names matter, rabbitMQ role takes the first entry for path to letsencrypt certificates
certbot_domains: "{{ [ inventory_hostname ] + (extra_certbot_domains | default([]) ) }}"
certbot_expand: true
certbot_agree_tos: --agree-tos

# NGINX
nginx_selinux_allow_local_connections: true
nginx_servers:
  - redirect-ssl
nginx_ssl_servers:
  - galaxy
#  - sentry
nginx_enable_default_server: false
nginx_conf_http:
  client_max_body_size: 50g
  # gzip: "on" # This is enabled by default in Ubuntu, and the duplicate directive will cause a crash.
  gzip_proxied: "any"
  gzip_static: "on"   # The ngx_http_gzip_static_module module allows sending precompressed files with the ".gz" filename extension instead of regular files.
  gzip_vary: "on"
  gzip_min_length: 128
  gzip_comp_level: 6  # Tradeoff of better compression for slightly more CPU time.
  gzip_types: |
      text/plain
      text/css
      text/xml
      text/javascript
      application/javascript
      application/x-javascript
      application/json
      application/xml
      application/xml+rss
      application/xhtml+xml
      application/x-font-ttf
      application/x-font-opentype
      image/png
      image/svg+xml
      image/x-icon

# default Let's encrypt, override in host_vars eventually
nginx_ssl_role: usegalaxy_eu.certbot
nginx_conf_ssl_certificate: /etc/letsencrypt/live/{{ inventory_hostname }}/fullchain.pem
nginx_conf_ssl_certificate_key: /etc/letsencrypt/live/{{ inventory_hostname }}/privkey.pem

#Install pip docker package for ansible
pip_install_packages:
  - name: docker

# RabbitMQ
rabbitmq_hostname: "{{ inventory_hostname }}"
rabbitmq_container:
  name: rabbit_hole
  image: rabbitmq:3.13-management
  hostname: "{{ inventory_hostname }}"

rabbitmq_plugins:
  - rabbitmq_management

# ok for noletsencrypt
#rabbitmq_conf_ssl_certificate: /etc/ssl/certs/cert.pem

rabbitmq_conf_ssl_certificate: /etc/ssl/certs/fullchain.pem
rabbitmq_conf_ssl_certificate_key: /etc/ssl/user/privkey-999:999.pem

rabbitmq_container_pause: 60

rabbitmq_config:
  listeners:
    tcp: none
  ssl_listeners:
    default: 5671
  ssl_options:
    verify: verify_peer
    cacertfile: /etc/ssl/certs/ca-certificates.crt
    certfile: "{{ rabbitmq_conf_ssl_certificate }}"
    keyfile: "{{ rabbitmq_conf_ssl_certificate_key }}"
    fail_if_no_peer_cert: 'false'
    versions:
      - tlsv1.3
      - tlsv1.2
  management_agent:
    disable_metrics_collector: "false"
  management:
    disable_stats: 'false'
  consumer_timeout: 21600000 # 6 hours in milliseconds

rabbitmq_vhosts:
  - pulsar
  - galaxy_gpu
  - galaxy_internal

rabbitmq_users:
  - user: debian
    password: "{{ rabbitmq_users_password.mqadmin }}"
    tags: administrator
    vhost: /
  - user: "{{ pulsar.user_name }}"
    password: "{{ rabbitmq_users_password.pulsar }}"
    vhost: pulsar
  - user: galaxy
    password: "{{ vault_rabbitmq_password_galaxy }}"
    vhost: galaxy_internal
  - user: flower
    password: "{{ vault_rabbitmq_password_flower }}"
    tags: administrator
    vhost: galaxy_internal


# TUS
galaxy_tusd_port: 1080
galaxy_tus_upload_store: "{{ galaxy_mutable_data_dir }}/tus" # /mnt/data/tus

#Redis
galaxy_additional_venv_packages:
  - redis

# Flower
flower_python_version: python3
flower_app_dir: "{{ galaxy_root }}"
flower_python_path: "{{ galaxy_root }}/server/lib"
flower_venv_dir: "{{ galaxy_venv_dir }}"
flower_app_name: galaxy.celery
flower_db_file: "{{ galaxy_root }}/var/flower.db"
flower_persistent: true
flower_broker_api: "https://flower:{{ vault_rabbitmq_password_flower }}@localhost:5671/api/"
flower_broker_url: "amqp://flower:{{ vault_rabbitmq_password_flower }}@localhost:5671/galaxy_internal?ssl=true"
flower_proxy_prefix: /flower

flower_ui_users:
  - name: admin
    password: "{{ vault_flower_user_password}}"

flower_environment_variables:
  GALAXY_CONFIG_FILE: "{{ galaxy_config_file }}"

# Telegraf
telegraf_plugins_extra:
  listen_galaxy_routes:
    plugin: "statsd"
    config:
      - service_address = ":8125"
      - metric_separator = "."
      - allowed_pending_messages = 10000
  monitor_galaxy_queue:
    plugin: "exec"
    config:
      - commands = ["/usr/bin/env PGDATABASE=galaxy /usr/local/bin/gxadmin iquery queue-overview --short-tool-id"]
      - timeout = "10s"
      - data_format = "influx"
      - interval = "15s"

# TIaaS setup config
tiaas_dir: /srv/tiaas
tiaas_admin_user: admin
tiaas_admin_pass: "{{ tiaas_password }}"
tiaas_info:
  owner: "Metacentrum"
  domain: "{{ inventory_hostname }}"
  owner_email: "{{ csnt_contact_email  }}"
  owner_site: "https://{{ inventory_hostname }}"
tiaas_send_email_to_requester: true
tiaas_send_email_to: "{{ tiaas_info.owner_email }}"
tiaas_send_email_from: "tiaas+noreply@{{ tiaas_info.domain }}"

# XXX: from Galaxy 24.1, disappered from /static/style/, but galaxyproject.tiaas2/defaults/main.yml is not updated yet
tiaas_galaxy_stylesheet: "{{ galaxy_server_dir }}/client/dist/base.css"

# Proftpd:
proftpd_galaxy_auth: yes
galaxy_ftp_upload_dir: "{{ galaxy_config.galaxy.ftp_upload_dir }}"
proftpd_display_connect: |
  {{ inventory_hostname }} FTP server

  Unauthorized access is prohibited
proftpd_create_ftp_upload_dir: yes
proftpd_options:
  - User: "{{ galaxy_user_name }}"
  - Group: "{{ galaxy_user_group_name }}"
  - Port: 21
proftpd_sql_db: galaxy@/var/run/postgresql
proftpd_sql_user: galaxy
#proftpd_conf_ssl_certificate: /etc/ssl/certs/cert.pem
#proftpd_conf_ssl_certificate_key: /etc/ssl/user/privkey-proftpd.pem
proftpd_conf_ssl_certificate: /etc/letsencrypt/live/{{ inventory_hostname }}/cert.pem
proftpd_conf_ssl_certificate_key: /etc/letsencrypt/live/{{ inventory_hostname }}/privkey.pem
proftpd_global_options:
  - PassivePorts: 56000 60000
proftpd_use_mod_tls_shmcache: false
proftpd_tls_options: NoSessionReuseRequired
